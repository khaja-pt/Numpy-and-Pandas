# -*- coding: utf-8 -*-
"""Untitled35.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LFw6nN3rcx9N-b4sWxAyemqFm6APHKH5
"""

import numpy as np

df= np.loadtxt("/content/drive/MyDrive/Scaler/Numpy_1_fitness (2).txt",dtype="str")

#Loding this data set in str because the dataset is in str format. If you dont load in str, errors all the way

df

df[:5]

df[0]

data=df.T #taking transpose of data to get one feature in one row

data[0]

df

date=data[0]

step_count=data[1]
mood=data[2]
calories_burned=data[3]
#unpacking and assigning feature(column) name

sleep_hours=data[4]
activity_status=data[5]
weight=data[6]

data[0]

date

step_count

#converting step_count in int64
step_count=np.array(step_count,dtype="int64")

step_count

calories_burned=np.array(calories_burned,dtype="int64")

calories_burned

weight=np.array(weight,dtype="int64")

activity_status

activity_status[activity_status=="0"]="Inactive"
#by using masking, we are converting string values into understable form

activity_status[activity_status=="500"]="Active"

activity_status

#to find the values of items
np.unique(activity_status,return_counts=True)

mood

np.unique(mood,return_counts=True)

np.unique(mood)

mood[mood=="100"]="sad"

mood[mood=="200"]="neutral"

mood[mood=="300"]="happy"

mood

step_count.mean()

np.unique(mood,return_counts=True)

np.max(step_count)

np.argmax(step_count) #index of max value

date[np.argmax(step_count)]  #find date of index for maximum step count value

calories_burned[np.argmax(step_count)]   #finding calories_burned

mood[np.argmax(step_count)]  #finding mood by masking index max step_count

np.min(calories_burned)

np.argmin(calories_burned)

mood[np.argmin(calories_burned)]

np.mean(step_count[mood=="sad"])

np.mean(step_count[mood=="happy"])

"""so clearly, the person is happy because, the step_count is more"""

np.mean(step_count[mood=="neutral"])

np.unique(mood[step_count>4000], return_counts=True)  #just finding how his workout and mood is co-related

np.unique(mood[step_count<2000],return_counts=True)

"""**So person is sad because he didnt do workout, now we can send/ recommend either food or gym items **"""

sleep_hours=np.array(sleep_hours,dtype="int64")

sleep_hours

np.unique(sleep_hours[mood=="happy"],return_counts=True)

np.unique(sleep_hours[mood=="sad"],return_counts=True)

"""sleeping patterns are effected because he is sad :("""

np.max(sleep_hours)

np.argmax(sleep_hours)

mood[np.argmax(sleep_hours)]

np.min(sleep_hours)

np.argmin(sleep_hours)

mood[np.argmin(sleep_hours)]

step_count[np.argmin(sleep_hours)]

"""so he did worked but he didnt sleep well. May be anexity issues, let find more"""

activity_status[np.argmin(sleep_hours)]

activity_status[np.argmax(sleep_hours)]

"""so even with more sleeping hours or less sleeping hours, he is still inactive. :( but person is happy :)

"""

calories_burned[np.argmin(sleep_hours)]

calories_burned[np.argmax(sleep_hours)]

weight

np.unique(weight[calories_burned<100],return_counts=True)

np.unique(weight[calories_burned>100],return_counts=True)

"""so he is gaining weight when calories are burnt more, which is good if he is thinking to gain weight and bad incase if he is not so."""

np.unique(activity_status[calories_burned>100],return_counts=True)

np.unique(activity_status[calories_burned<100],return_counts=True)

"""so if he not burining calories, he is not "Active"
"""

np.unique(date[calories_burned<100],return_counts=True)

np.unique(date[calories_burned>100],return_counts=True)

